
NEW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002350  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002f4  00800060  00002350  000023e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800354  00800354  000026d8  2**0
                  ALLOC
  3 .stab         00001968  00000000  00000000  000026d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000db2  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00004df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00004f92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005184  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000758f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00008915  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00009aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00009cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00009fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a910  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__vector_10>
      2c:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 35       	cpi	r26, 0x54	; 84
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 e5       	ldi	r26, 0x54	; 84
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 35       	cpi	r26, 0x56	; 86
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <main>
      8a:	0c 94 a6 11 	jmp	0x234c	; 0x234c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 97 11 	jmp	0x232e	; 0x232e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 97 11 	jmp	0x232e	; 0x232e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e6       	ldi	r22, 0x6B	; 107
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 93 11 	jmp	0x2326	; 0x2326 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 97 11 	jmp	0x232e	; 0x232e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 97 11 	jmp	0x232e	; 0x232e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 97 11 	jmp	0x232e	; 0x232e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 93 11 	jmp	0x2326	; 0x2326 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 58       	subi	r30, 0x8D	; 141
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"


uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum,uint8 Copy_u8Val)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <DIO_u8SetPinValue+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <DIO_u8SetPinValue+0x8>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <DIO_u8SetPinValue+0xa>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	8a 83       	std	Y+2, r24	; 0x02
     e3e:	6b 83       	std	Y+3, r22	; 0x03
     e40:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
     e42:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8PinNum <= DIO_u8_PIN7) && (Copy_u8Val<=DIO_u8_PIN_HIGH))
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	88 30       	cpi	r24, 0x08	; 8
     e48:	08 f0       	brcs	.+2      	; 0xe4c <DIO_u8SetPinValue+0x1e>
     e4a:	b1 c0       	rjmp	.+354    	; 0xfae <DIO_u8SetPinValue+0x180>
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	08 f0       	brcs	.+2      	; 0xe54 <DIO_u8SetPinValue+0x26>
     e52:	ad c0       	rjmp	.+346    	; 0xfae <DIO_u8SetPinValue+0x180>
	{
		switch(Copy_u8Port)
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	3e 83       	std	Y+6, r19	; 0x06
     e5c:	2d 83       	std	Y+5, r18	; 0x05
     e5e:	6d 81       	ldd	r22, Y+5	; 0x05
     e60:	7e 81       	ldd	r23, Y+6	; 0x06
     e62:	61 30       	cpi	r22, 0x01	; 1
     e64:	71 05       	cpc	r23, r1
     e66:	d1 f1       	breq	.+116    	; 0xedc <DIO_u8SetPinValue+0xae>
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	91 05       	cpc	r25, r1
     e70:	34 f4       	brge	.+12     	; 0xe7e <DIO_u8SetPinValue+0x50>
     e72:	2d 81       	ldd	r18, Y+5	; 0x05
     e74:	3e 81       	ldd	r19, Y+6	; 0x06
     e76:	21 15       	cp	r18, r1
     e78:	31 05       	cpc	r19, r1
     e7a:	71 f0       	breq	.+28     	; 0xe98 <DIO_u8SetPinValue+0x6a>
     e7c:	95 c0       	rjmp	.+298    	; 0xfa8 <DIO_u8SetPinValue+0x17a>
     e7e:	6d 81       	ldd	r22, Y+5	; 0x05
     e80:	7e 81       	ldd	r23, Y+6	; 0x06
     e82:	62 30       	cpi	r22, 0x02	; 2
     e84:	71 05       	cpc	r23, r1
     e86:	09 f4       	brne	.+2      	; 0xe8a <DIO_u8SetPinValue+0x5c>
     e88:	4b c0       	rjmp	.+150    	; 0xf20 <DIO_u8SetPinValue+0xf2>
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	9e 81       	ldd	r25, Y+6	; 0x06
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	91 05       	cpc	r25, r1
     e92:	09 f4       	brne	.+2      	; 0xe96 <DIO_u8SetPinValue+0x68>
     e94:	67 c0       	rjmp	.+206    	; 0xf64 <DIO_u8SetPinValue+0x136>
     e96:	88 c0       	rjmp	.+272    	; 0xfa8 <DIO_u8SetPinValue+0x17a>
		{

		case DIO_u8_PORTA:	ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
     e98:	ab e3       	ldi	r26, 0x3B	; 59
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	eb e3       	ldi	r30, 0x3B	; 59
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_u8SetPinValue+0x86>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	2a 95       	dec	r18
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_u8SetPinValue+0x82>
     eb8:	80 95       	com	r24
     eba:	48 23       	and	r20, r24
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	b9 01       	movw	r22, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_u8SetPinValue+0xa2>
     ecc:	66 0f       	add	r22, r22
     ece:	77 1f       	adc	r23, r23
     ed0:	8a 95       	dec	r24
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_u8SetPinValue+0x9e>
     ed4:	cb 01       	movw	r24, r22
     ed6:	84 2b       	or	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	6b c0       	rjmp	.+214    	; 0xfb2 <DIO_u8SetPinValue+0x184>
		case DIO_u8_PORTB:	ASSIGN_BIT(PORTB,Copy_u8PinNum,Copy_u8Val); break;
     edc:	a8 e3       	ldi	r26, 0x38	; 56
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e8 e3       	ldi	r30, 0x38	; 56
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_u8SetPinValue+0xca>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	2a 95       	dec	r18
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_u8SetPinValue+0xc6>
     efc:	80 95       	com	r24
     efe:	48 23       	and	r20, r24
     f00:	8c 81       	ldd	r24, Y+4	; 0x04
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 2f       	mov	r24, r24
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	b9 01       	movw	r22, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_u8SetPinValue+0xe6>
     f10:	66 0f       	add	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	8a 95       	dec	r24
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_u8SetPinValue+0xe2>
     f18:	cb 01       	movw	r24, r22
     f1a:	84 2b       	or	r24, r20
     f1c:	8c 93       	st	X, r24
     f1e:	49 c0       	rjmp	.+146    	; 0xfb2 <DIO_u8SetPinValue+0x184>
		case DIO_u8_PORTC:	ASSIGN_BIT(PORTC,Copy_u8PinNum,Copy_u8Val); break;
     f20:	a5 e3       	ldi	r26, 0x35	; 53
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e5 e3       	ldi	r30, 0x35	; 53
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_u8SetPinValue+0x10e>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	2a 95       	dec	r18
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_u8SetPinValue+0x10a>
     f40:	80 95       	com	r24
     f42:	48 23       	and	r20, r24
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	b9 01       	movw	r22, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_u8SetPinValue+0x12a>
     f54:	66 0f       	add	r22, r22
     f56:	77 1f       	adc	r23, r23
     f58:	8a 95       	dec	r24
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_u8SetPinValue+0x126>
     f5c:	cb 01       	movw	r24, r22
     f5e:	84 2b       	or	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	27 c0       	rjmp	.+78     	; 0xfb2 <DIO_u8SetPinValue+0x184>
		case DIO_u8_PORTD:	ASSIGN_BIT(PORTD,Copy_u8PinNum,Copy_u8Val); break;
     f64:	a2 e3       	ldi	r26, 0x32	; 50
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e2 e3       	ldi	r30, 0x32	; 50
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_u8SetPinValue+0x152>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	2a 95       	dec	r18
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_u8SetPinValue+0x14e>
     f84:	80 95       	com	r24
     f86:	48 23       	and	r20, r24
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	b9 01       	movw	r22, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_u8SetPinValue+0x16e>
     f98:	66 0f       	add	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	8a 95       	dec	r24
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_u8SetPinValue+0x16a>
     fa0:	cb 01       	movw	r24, r22
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <DIO_u8SetPinValue+0x184>
		default: Local_u8ErrorState = NOK; break;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_u8SetPinValue+0x184>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb4:	26 96       	adiw	r28, 0x06	; 6
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <DIO_u8SetPortValue>:


uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Val)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <DIO_u8SetPortValue+0x6>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <DIO_u8SetPortValue+0x8>
     fce:	0f 92       	push	r0
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	8a 83       	std	Y+2, r24	; 0x02
     fd6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
     fd8:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	3d 83       	std	Y+5, r19	; 0x05
     fe2:	2c 83       	std	Y+4, r18	; 0x04
     fe4:	8c 81       	ldd	r24, Y+4	; 0x04
     fe6:	9d 81       	ldd	r25, Y+5	; 0x05
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	91 05       	cpc	r25, r1
     fec:	d1 f0       	breq	.+52     	; 0x1022 <DIO_u8SetPortValue+0x5c>
     fee:	2c 81       	ldd	r18, Y+4	; 0x04
     ff0:	3d 81       	ldd	r19, Y+5	; 0x05
     ff2:	22 30       	cpi	r18, 0x02	; 2
     ff4:	31 05       	cpc	r19, r1
     ff6:	2c f4       	brge	.+10     	; 0x1002 <DIO_u8SetPortValue+0x3c>
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	61 f0       	breq	.+24     	; 0x1018 <DIO_u8SetPortValue+0x52>
    1000:	1f c0       	rjmp	.+62     	; 0x1040 <DIO_u8SetPortValue+0x7a>
    1002:	2c 81       	ldd	r18, Y+4	; 0x04
    1004:	3d 81       	ldd	r19, Y+5	; 0x05
    1006:	22 30       	cpi	r18, 0x02	; 2
    1008:	31 05       	cpc	r19, r1
    100a:	81 f0       	breq	.+32     	; 0x102c <DIO_u8SetPortValue+0x66>
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	9d 81       	ldd	r25, Y+5	; 0x05
    1010:	83 30       	cpi	r24, 0x03	; 3
    1012:	91 05       	cpc	r25, r1
    1014:	81 f0       	breq	.+32     	; 0x1036 <DIO_u8SetPortValue+0x70>
    1016:	14 c0       	rjmp	.+40     	; 0x1040 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8_PORTA:	PORTA = Copy_u8Val; break;
    1018:	eb e3       	ldi	r30, 0x3B	; 59
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	80 83       	st	Z, r24
    1020:	11 c0       	rjmp	.+34     	; 0x1044 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB:	PORTB = Copy_u8Val; break;
    1022:	e8 e3       	ldi	r30, 0x38	; 56
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	80 83       	st	Z, r24
    102a:	0c c0       	rjmp	.+24     	; 0x1044 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC:	PORTC = Copy_u8Val; break;
    102c:	e5 e3       	ldi	r30, 0x35	; 53
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	80 83       	st	Z, r24
    1034:	07 c0       	rjmp	.+14     	; 0x1044 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD:	PORTD = Copy_u8Val; break;
    1036:	e2 e3       	ldi	r30, 0x32	; 50
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	80 83       	st	Z, r24
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK; break;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1044:	89 81       	ldd	r24, Y+1	; 0x01
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <DIO_u8ReadPinValue>:

}*/


uint8 DIO_u8ReadPinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum , uint8* Copy_pu8Value)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	27 97       	sbiw	r28, 0x07	; 7
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	8a 83       	std	Y+2, r24	; 0x02
    106c:	6b 83       	std	Y+3, r22	; 0x03
    106e:	5d 83       	std	Y+5, r21	; 0x05
    1070:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrorState = OK;
    1072:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value!= NULL)
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	9d 81       	ldd	r25, Y+5	; 0x05
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	09 f4       	brne	.+2      	; 0x107e <DIO_u8ReadPinValue+0x28>
    107c:	7b c0       	rjmp	.+246    	; 0x1174 <DIO_u8ReadPinValue+0x11e>
	{
		if(Copy_u8PinNum <= DIO_u8_PIN7)
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	88 30       	cpi	r24, 0x08	; 8
    1082:	08 f0       	brcs	.+2      	; 0x1086 <DIO_u8ReadPinValue+0x30>
    1084:	74 c0       	rjmp	.+232    	; 0x116e <DIO_u8ReadPinValue+0x118>
		{
			switch(Copy_u8Port)
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3f 83       	std	Y+7, r19	; 0x07
    108e:	2e 83       	std	Y+6, r18	; 0x06
    1090:	4e 81       	ldd	r20, Y+6	; 0x06
    1092:	5f 81       	ldd	r21, Y+7	; 0x07
    1094:	41 30       	cpi	r20, 0x01	; 1
    1096:	51 05       	cpc	r21, r1
    1098:	59 f1       	breq	.+86     	; 0x10f0 <DIO_u8ReadPinValue+0x9a>
    109a:	8e 81       	ldd	r24, Y+6	; 0x06
    109c:	9f 81       	ldd	r25, Y+7	; 0x07
    109e:	82 30       	cpi	r24, 0x02	; 2
    10a0:	91 05       	cpc	r25, r1
    10a2:	34 f4       	brge	.+12     	; 0x10b0 <DIO_u8ReadPinValue+0x5a>
    10a4:	2e 81       	ldd	r18, Y+6	; 0x06
    10a6:	3f 81       	ldd	r19, Y+7	; 0x07
    10a8:	21 15       	cp	r18, r1
    10aa:	31 05       	cpc	r19, r1
    10ac:	69 f0       	breq	.+26     	; 0x10c8 <DIO_u8ReadPinValue+0x72>
    10ae:	5c c0       	rjmp	.+184    	; 0x1168 <DIO_u8ReadPinValue+0x112>
    10b0:	4e 81       	ldd	r20, Y+6	; 0x06
    10b2:	5f 81       	ldd	r21, Y+7	; 0x07
    10b4:	42 30       	cpi	r20, 0x02	; 2
    10b6:	51 05       	cpc	r21, r1
    10b8:	79 f1       	breq	.+94     	; 0x1118 <DIO_u8ReadPinValue+0xc2>
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	9f 81       	ldd	r25, Y+7	; 0x07
    10be:	83 30       	cpi	r24, 0x03	; 3
    10c0:	91 05       	cpc	r25, r1
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <DIO_u8ReadPinValue+0x70>
    10c4:	3d c0       	rjmp	.+122    	; 0x1140 <DIO_u8ReadPinValue+0xea>
    10c6:	50 c0       	rjmp	.+160    	; 0x1168 <DIO_u8ReadPinValue+0x112>
			{

			case DIO_u8_PORTA:	*Copy_pu8Value = GET_BIT(PINA,Copy_u8PinNum); break;
    10c8:	e9 e3       	ldi	r30, 0x39	; 57
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a9 01       	movw	r20, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_u8ReadPinValue+0x8a>
    10dc:	55 95       	asr	r21
    10de:	47 95       	ror	r20
    10e0:	8a 95       	dec	r24
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_u8ReadPinValue+0x86>
    10e4:	ca 01       	movw	r24, r20
    10e6:	81 70       	andi	r24, 0x01	; 1
    10e8:	ec 81       	ldd	r30, Y+4	; 0x04
    10ea:	fd 81       	ldd	r31, Y+5	; 0x05
    10ec:	80 83       	st	Z, r24
    10ee:	44 c0       	rjmp	.+136    	; 0x1178 <DIO_u8ReadPinValue+0x122>
			case DIO_u8_PORTB:	*Copy_pu8Value = GET_BIT(PINB,Copy_u8PinNum); break;
    10f0:	e6 e3       	ldi	r30, 0x36	; 54
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a9 01       	movw	r20, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_u8ReadPinValue+0xb2>
    1104:	55 95       	asr	r21
    1106:	47 95       	ror	r20
    1108:	8a 95       	dec	r24
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_u8ReadPinValue+0xae>
    110c:	ca 01       	movw	r24, r20
    110e:	81 70       	andi	r24, 0x01	; 1
    1110:	ec 81       	ldd	r30, Y+4	; 0x04
    1112:	fd 81       	ldd	r31, Y+5	; 0x05
    1114:	80 83       	st	Z, r24
    1116:	30 c0       	rjmp	.+96     	; 0x1178 <DIO_u8ReadPinValue+0x122>
			case DIO_u8_PORTC:	*Copy_pu8Value = GET_BIT(PINC,Copy_u8PinNum); break;
    1118:	e3 e3       	ldi	r30, 0x33	; 51
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_u8ReadPinValue+0xda>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_u8ReadPinValue+0xd6>
    1134:	ca 01       	movw	r24, r20
    1136:	81 70       	andi	r24, 0x01	; 1
    1138:	ec 81       	ldd	r30, Y+4	; 0x04
    113a:	fd 81       	ldd	r31, Y+5	; 0x05
    113c:	80 83       	st	Z, r24
    113e:	1c c0       	rjmp	.+56     	; 0x1178 <DIO_u8ReadPinValue+0x122>
			case DIO_u8_PORTD:	*Copy_pu8Value = GET_BIT(PIND,Copy_u8PinNum); break;
    1140:	e0 e3       	ldi	r30, 0x30	; 48
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a9 01       	movw	r20, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_u8ReadPinValue+0x102>
    1154:	55 95       	asr	r21
    1156:	47 95       	ror	r20
    1158:	8a 95       	dec	r24
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_u8ReadPinValue+0xfe>
    115c:	ca 01       	movw	r24, r20
    115e:	81 70       	andi	r24, 0x01	; 1
    1160:	ec 81       	ldd	r30, Y+4	; 0x04
    1162:	fd 81       	ldd	r31, Y+5	; 0x05
    1164:	80 83       	st	Z, r24
    1166:	08 c0       	rjmp	.+16     	; 0x1178 <DIO_u8ReadPinValue+0x122>
			default: Local_u8ErrorState = NOK; break;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	05 c0       	rjmp	.+10     	; 0x1178 <DIO_u8ReadPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_u8ReadPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	89 83       	std	Y+1, r24	; 0x01
	}


return Local_u8ErrorState;
    1178:	89 81       	ldd	r24, Y+1	; 0x01


}
    117a:	27 96       	adiw	r28, 0x07	; 7
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <DIO_u8TogglePinValue>:



uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <DIO_u8TogglePinValue+0x6>
    1192:	00 d0       	rcall	.+0      	; 0x1194 <DIO_u8TogglePinValue+0x8>
    1194:	0f 92       	push	r0
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	8a 83       	std	Y+2, r24	; 0x02
    119c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    119e:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8PinNum <= DIO_u8_PIN7)
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 30       	cpi	r24, 0x08	; 8
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <DIO_u8TogglePinValue+0x1c>
    11a6:	72 c0       	rjmp	.+228    	; 0x128c <DIO_u8TogglePinValue+0x100>
		{
			switch(Copy_u8Port)
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3d 83       	std	Y+5, r19	; 0x05
    11b0:	2c 83       	std	Y+4, r18	; 0x04
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	9d 81       	ldd	r25, Y+5	; 0x05
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	49 f1       	breq	.+82     	; 0x120e <DIO_u8TogglePinValue+0x82>
    11bc:	2c 81       	ldd	r18, Y+4	; 0x04
    11be:	3d 81       	ldd	r19, Y+5	; 0x05
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <DIO_u8TogglePinValue+0x44>
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	61 f0       	breq	.+24     	; 0x11e6 <DIO_u8TogglePinValue+0x5a>
    11ce:	5b c0       	rjmp	.+182    	; 0x1286 <DIO_u8TogglePinValue+0xfa>
    11d0:	2c 81       	ldd	r18, Y+4	; 0x04
    11d2:	3d 81       	ldd	r19, Y+5	; 0x05
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	71 f1       	breq	.+92     	; 0x1236 <DIO_u8TogglePinValue+0xaa>
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	9d 81       	ldd	r25, Y+5	; 0x05
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	91 05       	cpc	r25, r1
    11e2:	e9 f1       	breq	.+122    	; 0x125e <DIO_u8TogglePinValue+0xd2>
    11e4:	50 c0       	rjmp	.+160    	; 0x1286 <DIO_u8TogglePinValue+0xfa>
			{

			case DIO_u8_PORTA:	TOG_BIT(PORTA,Copy_u8PinNum); break;
    11e6:	ab e3       	ldi	r26, 0x3B	; 59
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	eb e3       	ldi	r30, 0x3B	; 59
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_u8TogglePinValue+0x78>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_u8TogglePinValue+0x74>
    1208:	84 27       	eor	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	41 c0       	rjmp	.+130    	; 0x1290 <DIO_u8TogglePinValue+0x104>
			case DIO_u8_PORTB:	TOG_BIT(PORTB,Copy_u8PinNum); break;
    120e:	a8 e3       	ldi	r26, 0x38	; 56
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e8 e3       	ldi	r30, 0x38	; 56
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_u8TogglePinValue+0xa0>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_u8TogglePinValue+0x9c>
    1230:	84 27       	eor	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	2d c0       	rjmp	.+90     	; 0x1290 <DIO_u8TogglePinValue+0x104>
			case DIO_u8_PORTC:	TOG_BIT(PORTC,Copy_u8PinNum); break;
    1236:	a5 e3       	ldi	r26, 0x35	; 53
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e5 e3       	ldi	r30, 0x35	; 53
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_u8TogglePinValue+0xc8>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_u8TogglePinValue+0xc4>
    1258:	84 27       	eor	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	19 c0       	rjmp	.+50     	; 0x1290 <DIO_u8TogglePinValue+0x104>
			case DIO_u8_PORTD:	TOG_BIT(PORTD,Copy_u8PinNum); break;
    125e:	a2 e3       	ldi	r26, 0x32	; 50
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e2 e3       	ldi	r30, 0x32	; 50
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_u8TogglePinValue+0xf0>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_u8TogglePinValue+0xec>
    1280:	84 27       	eor	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	05 c0       	rjmp	.+10     	; 0x1290 <DIO_u8TogglePinValue+0x104>
			default: Local_u8ErrorState = NOK; break;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_u8TogglePinValue+0x104>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8ErrorState;
    1290:	89 81       	ldd	r24, Y+1	; 0x01



}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <GIE_voidEnableGlobal>:

#include "GIE_reg.h"
#include "GIE_interface.h"

void GIE_voidEnableGlobal(void)
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
	
	/*SET_BIT(SREG,SREG_I);*/
	
	__asm volatile("SEI");
    12aa:	78 94       	sei
	
}
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <GIE_voidDisableGlobal>:


void GIE_voidDisableGlobal(void)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	/*CLR_BIT(SREG,SREG_I);*/
	
	__asm volatile("CLI");
    12ba:	f8 94       	cli
	
	
	
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <PORT_voidInit>:
#include "PORT_reg.h"



void PORT_voidInit(void)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    12ca:	ea e3       	ldi	r30, 0x3A	; 58
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    12d2:	e7 e3       	ldi	r30, 0x37	; 55
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8e e0       	ldi	r24, 0x0E	; 14
    12d8:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    12da:	e4 e3       	ldi	r30, 0x34	; 52
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;	
    12e0:	e1 e3       	ldi	r30, 0x31	; 49
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	10 82       	st	Z, r1


			PORTA = PORTA_INIT_VALUE;
    12e6:	eb e3       	ldi	r30, 0x3B	; 59
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	10 82       	st	Z, r1
			PORTB = PORTB_INIT_VALUE;
    12ec:	e8 e3       	ldi	r30, 0x38	; 56
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	10 82       	st	Z, r1
			PORTC = PORTC_INIT_VALUE;
    12f2:	e5 e3       	ldi	r30, 0x35	; 53
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	10 82       	st	Z, r1
			PORTD = PORTD_INIT_VALUE;
    12f8:	e2 e3       	ldi	r30, 0x32	; 50
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	10 82       	st	Z, r1

}
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <TIMER_Init>:

static void (*Timer0ovf_pvCallBackFunc)(void) = NULL;


void TIMER_Init(void)
{/*
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62


*/

	/*Wave generation mode : Normal*/
		CLR_BIT(TCCR0,TCCR0_WGM00);
    130c:	a3 e5       	ldi	r26, 0x53	; 83
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e3 e5       	ldi	r30, 0x53	; 83
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8f 7b       	andi	r24, 0xBF	; 191
    1318:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM01);
    131a:	a3 e5       	ldi	r26, 0x53	; 83
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e3 e5       	ldi	r30, 0x53	; 83
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	87 7f       	andi	r24, 0xF7	; 247
    1326:	8c 93       	st	X, r24

		/*No Oc0*/
		CLR_BIT(TCCR0,TCCR0_COM00);
    1328:	a3 e5       	ldi	r26, 0x53	; 83
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e3 e5       	ldi	r30, 0x53	; 83
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8f 7e       	andi	r24, 0xEF	; 239
    1334:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_COM01);
    1336:	a3 e5       	ldi	r26, 0x53	; 83
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e3 e5       	ldi	r30, 0x53	; 83
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8f 7d       	andi	r24, 0xDF	; 223
    1342:	8c 93       	st	X, r24

	/*CLK SET PRESCALER = 64*/
		SET_BIT(TCCR0,TCCR0_CS00);
    1344:	a3 e5       	ldi	r26, 0x53	; 83
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e3 e5       	ldi	r30, 0x53	; 83
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	81 60       	ori	r24, 0x01	; 1
    1350:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
    1352:	a3 e5       	ldi	r26, 0x53	; 83
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e3 e5       	ldi	r30, 0x53	; 83
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	82 60       	ori	r24, 0x02	; 2
    135e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
    1360:	a3 e5       	ldi	r26, 0x53	; 83
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e3 e5       	ldi	r30, 0x53	; 83
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	8b 7f       	andi	r24, 0xFB	; 251
    136c:	8c 93       	st	X, r24

		/*Compare mode enterrupt enable*/
		SET_BIT(TIMSK,TIMSK_OCIE0);
    136e:	a9 e5       	ldi	r26, 0x59	; 89
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e9 e5       	ldi	r30, 0x59	; 89
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	82 60       	ori	r24, 0x02	; 2
    137a:	8c 93       	st	X, r24


		OCR0=250;
    137c:	ec e5       	ldi	r30, 0x5C	; 92
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	8a ef       	ldi	r24, 0xFA	; 250
    1382:	80 83       	st	Z, r24





}
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <TIMER0ovf_u8SetCallBack>:

uint8 TIMER0ovf_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <TIMER0ovf_u8SetCallBack+0x6>
    1390:	0f 92       	push	r0
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	9b 83       	std	Y+3, r25	; 0x03
    1398:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
    139a:	19 82       	std	Y+1, r1	; 0x01
			if(Copy_pvCallBackFunc!=NULL)
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	9b 81       	ldd	r25, Y+3	; 0x03
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	39 f0       	breq	.+14     	; 0x13b2 <TIMER0ovf_u8SetCallBack+0x28>
			{
				Timer0ovf_pvCallBackFunc = Copy_pvCallBackFunc;
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	9b 81       	ldd	r25, Y+3	; 0x03
    13a8:	90 93 55 03 	sts	0x0355, r25
    13ac:	80 93 54 03 	sts	0x0354, r24
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <TIMER0ovf_u8SetCallBack+0x2c>

			}
			else
			{
				Local_u8ErrorState=NULL_POINTER;
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_u8ErrorState;
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <Timer0_voidSetTimerValue>:

void Timer0_voidSetTimerValue(uint8 Copy_u8Value)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	0f 92       	push	r0
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
    13d0:	e2 e5       	ldi	r30, 0x52	; 82
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	80 83       	st	Z, r24
}
    13d8:	0f 90       	pop	r0
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <__vector_11>:

/*Timer 0 Overflow ISR*/
void __vector_11(void) __attribute__((signal));

void __vector_11(void)
{
    13e0:	1f 92       	push	r1
    13e2:	0f 92       	push	r0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	0f 92       	push	r0
    13e8:	11 24       	eor	r1, r1
    13ea:	2f 93       	push	r18
    13ec:	3f 93       	push	r19
    13ee:	4f 93       	push	r20
    13f0:	5f 93       	push	r21
    13f2:	6f 93       	push	r22
    13f4:	7f 93       	push	r23
    13f6:	8f 93       	push	r24
    13f8:	9f 93       	push	r25
    13fa:	af 93       	push	r26
    13fc:	bf 93       	push	r27
    13fe:	ef 93       	push	r30
    1400:	ff 93       	push	r31
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	if(Timer0ovf_pvCallBackFunc!=NULL)
    140a:	80 91 54 03 	lds	r24, 0x0354
    140e:	90 91 55 03 	lds	r25, 0x0355
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	29 f0       	breq	.+10     	; 0x1420 <__vector_11+0x40>
	{
		Timer0ovf_pvCallBackFunc();
    1416:	e0 91 54 03 	lds	r30, 0x0354
    141a:	f0 91 55 03 	lds	r31, 0x0355
    141e:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	ff 91       	pop	r31
    1426:	ef 91       	pop	r30
    1428:	bf 91       	pop	r27
    142a:	af 91       	pop	r26
    142c:	9f 91       	pop	r25
    142e:	8f 91       	pop	r24
    1430:	7f 91       	pop	r23
    1432:	6f 91       	pop	r22
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	0f 90       	pop	r0
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	0f 90       	pop	r0
    1442:	1f 90       	pop	r1
    1444:	18 95       	reti

00001446 <__vector_10>:

/*Timer 0 Compare ISR*/
void __vector_10(void) __attribute__((signal));

void __vector_10(void)
{
    1446:	1f 92       	push	r1
    1448:	0f 92       	push	r0
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	0f 92       	push	r0
    144e:	11 24       	eor	r1, r1
    1450:	2f 93       	push	r18
    1452:	3f 93       	push	r19
    1454:	4f 93       	push	r20
    1456:	5f 93       	push	r21
    1458:	6f 93       	push	r22
    145a:	7f 93       	push	r23
    145c:	8f 93       	push	r24
    145e:	9f 93       	push	r25
    1460:	af 93       	push	r26
    1462:	bf 93       	push	r27
    1464:	ef 93       	push	r30
    1466:	ff 93       	push	r31
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62

	if(Timer0ovf_pvCallBackFunc!=NULL)
    1470:	80 91 54 03 	lds	r24, 0x0354
    1474:	90 91 55 03 	lds	r25, 0x0355
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	29 f0       	breq	.+10     	; 0x1486 <__vector_10+0x40>
		{
			Timer0ovf_pvCallBackFunc();
    147c:	e0 91 54 03 	lds	r30, 0x0354
    1480:	f0 91 55 03 	lds	r31, 0x0355
    1484:	09 95       	icall
			/*Do nothing*/
		}



}
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	ff 91       	pop	r31
    148c:	ef 91       	pop	r30
    148e:	bf 91       	pop	r27
    1490:	af 91       	pop	r26
    1492:	9f 91       	pop	r25
    1494:	8f 91       	pop	r24
    1496:	7f 91       	pop	r23
    1498:	6f 91       	pop	r22
    149a:	5f 91       	pop	r21
    149c:	4f 91       	pop	r20
    149e:	3f 91       	pop	r19
    14a0:	2f 91       	pop	r18
    14a2:	0f 90       	pop	r0
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	0f 90       	pop	r0
    14a8:	1f 90       	pop	r1
    14aa:	18 95       	reti

000014ac <GLCD_Command>:
#define RST		 PC5

#define TotalPage	 8

void GLCD_Command(char Command)		/* GLCD command function */
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	e1 97       	sbiw	r28, 0x31	; 49
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Command;		/* Copy command on data pin */
    14c2:	eb e3       	ldi	r30, 0x3B	; 59
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	89 a9       	ldd	r24, Y+49	; 0x31
    14c8:	80 83       	st	Z, r24
	Command_Port &= ~(1 << RS);	/* Make RS LOW for command register*/
    14ca:	a5 e3       	ldi	r26, 0x35	; 53
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e5 e3       	ldi	r30, 0x35	; 53
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8e 7f       	andi	r24, 0xFE	; 254
    14d6:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
    14d8:	a5 e3       	ldi	r26, 0x35	; 53
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e5 e3       	ldi	r30, 0x35	; 53
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8d 7f       	andi	r24, 0xFD	; 253
    14e4:	8c 93       	st	X, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
    14e6:	a5 e3       	ldi	r26, 0x35	; 53
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e5 e3       	ldi	r30, 0x35	; 53
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	84 60       	ori	r24, 0x04	; 4
    14f2:	8c 93       	st	X, r24
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a0 ea       	ldi	r26, 0xA0	; 160
    14fa:	b0 e4       	ldi	r27, 0x40	; 64
    14fc:	8d a7       	std	Y+45, r24	; 0x2d
    14fe:	9e a7       	std	Y+46, r25	; 0x2e
    1500:	af a7       	std	Y+47, r26	; 0x2f
    1502:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1504:	6d a5       	ldd	r22, Y+45	; 0x2d
    1506:	7e a5       	ldd	r23, Y+46	; 0x2e
    1508:	8f a5       	ldd	r24, Y+47	; 0x2f
    150a:	98 a9       	ldd	r25, Y+48	; 0x30
    150c:	2b ea       	ldi	r18, 0xAB	; 171
    150e:	3a ea       	ldi	r19, 0xAA	; 170
    1510:	4a e2       	ldi	r20, 0x2A	; 42
    1512:	50 e4       	ldi	r21, 0x40	; 64
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	89 a7       	std	Y+41, r24	; 0x29
    151e:	9a a7       	std	Y+42, r25	; 0x2a
    1520:	ab a7       	std	Y+43, r26	; 0x2b
    1522:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1524:	69 a5       	ldd	r22, Y+41	; 0x29
    1526:	7a a5       	ldd	r23, Y+42	; 0x2a
    1528:	8b a5       	ldd	r24, Y+43	; 0x2b
    152a:	9c a5       	ldd	r25, Y+44	; 0x2c
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	5f e3       	ldi	r21, 0x3F	; 63
    1534:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1538:	88 23       	and	r24, r24
    153a:	1c f4       	brge	.+6      	; 0x1542 <GLCD_Command+0x96>
		__ticks = 1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	88 a7       	std	Y+40, r24	; 0x28
    1540:	91 c0       	rjmp	.+290    	; 0x1664 <GLCD_Command+0x1b8>
	else if (__tmp > 255)
    1542:	69 a5       	ldd	r22, Y+41	; 0x29
    1544:	7a a5       	ldd	r23, Y+42	; 0x2a
    1546:	8b a5       	ldd	r24, Y+43	; 0x2b
    1548:	9c a5       	ldd	r25, Y+44	; 0x2c
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	4f e7       	ldi	r20, 0x7F	; 127
    1550:	53 e4       	ldi	r21, 0x43	; 67
    1552:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1556:	18 16       	cp	r1, r24
    1558:	0c f0       	brlt	.+2      	; 0x155c <GLCD_Command+0xb0>
    155a:	7b c0       	rjmp	.+246    	; 0x1652 <GLCD_Command+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    155c:	6d a5       	ldd	r22, Y+45	; 0x2d
    155e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1560:	8f a5       	ldd	r24, Y+47	; 0x2f
    1562:	98 a9       	ldd	r25, Y+48	; 0x30
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	4a e7       	ldi	r20, 0x7A	; 122
    156a:	54 e4       	ldi	r21, 0x44	; 68
    156c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	8c a3       	std	Y+36, r24	; 0x24
    1576:	9d a3       	std	Y+37, r25	; 0x25
    1578:	ae a3       	std	Y+38, r26	; 0x26
    157a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157c:	6c a1       	ldd	r22, Y+36	; 0x24
    157e:	7d a1       	ldd	r23, Y+37	; 0x25
    1580:	8e a1       	ldd	r24, Y+38	; 0x26
    1582:	9f a1       	ldd	r25, Y+39	; 0x27
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4a ef       	ldi	r20, 0xFA	; 250
    158a:	54 e4       	ldi	r21, 0x44	; 68
    158c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	88 a3       	std	Y+32, r24	; 0x20
    1596:	99 a3       	std	Y+33, r25	; 0x21
    1598:	aa a3       	std	Y+34, r26	; 0x22
    159a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    159c:	68 a1       	ldd	r22, Y+32	; 0x20
    159e:	79 a1       	ldd	r23, Y+33	; 0x21
    15a0:	8a a1       	ldd	r24, Y+34	; 0x22
    15a2:	9b a1       	ldd	r25, Y+35	; 0x23
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	40 e8       	ldi	r20, 0x80	; 128
    15aa:	5f e3       	ldi	r21, 0x3F	; 63
    15ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15b0:	88 23       	and	r24, r24
    15b2:	2c f4       	brge	.+10     	; 0x15be <GLCD_Command+0x112>
		__ticks = 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	9f 8f       	std	Y+31, r25	; 0x1f
    15ba:	8e 8f       	std	Y+30, r24	; 0x1e
    15bc:	3f c0       	rjmp	.+126    	; 0x163c <GLCD_Command+0x190>
	else if (__tmp > 65535)
    15be:	68 a1       	ldd	r22, Y+32	; 0x20
    15c0:	79 a1       	ldd	r23, Y+33	; 0x21
    15c2:	8a a1       	ldd	r24, Y+34	; 0x22
    15c4:	9b a1       	ldd	r25, Y+35	; 0x23
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	3f ef       	ldi	r19, 0xFF	; 255
    15ca:	4f e7       	ldi	r20, 0x7F	; 127
    15cc:	57 e4       	ldi	r21, 0x47	; 71
    15ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15d2:	18 16       	cp	r1, r24
    15d4:	4c f5       	brge	.+82     	; 0x1628 <GLCD_Command+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d6:	6c a1       	ldd	r22, Y+36	; 0x24
    15d8:	7d a1       	ldd	r23, Y+37	; 0x25
    15da:	8e a1       	ldd	r24, Y+38	; 0x26
    15dc:	9f a1       	ldd	r25, Y+39	; 0x27
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9f 8f       	std	Y+31, r25	; 0x1f
    15fc:	8e 8f       	std	Y+30, r24	; 0x1e
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <GLCD_Command+0x172>
    1600:	88 ec       	ldi	r24, 0xC8	; 200
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9d 8f       	std	Y+29, r25	; 0x1d
    1606:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1608:	8c 8d       	ldd	r24, Y+28	; 0x1c
    160a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <GLCD_Command+0x160>
    1610:	9d 8f       	std	Y+29, r25	; 0x1d
    1612:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1616:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	9f 8f       	std	Y+31, r25	; 0x1f
    161c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1620:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	69 f7       	brne	.-38     	; 0x1600 <GLCD_Command+0x154>
    1626:	24 c0       	rjmp	.+72     	; 0x1670 <GLCD_Command+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	68 a1       	ldd	r22, Y+32	; 0x20
    162a:	79 a1       	ldd	r23, Y+33	; 0x21
    162c:	8a a1       	ldd	r24, Y+34	; 0x22
    162e:	9b a1       	ldd	r25, Y+35	; 0x23
    1630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	9f 8f       	std	Y+31, r25	; 0x1f
    163a:	8e 8f       	std	Y+30, r24	; 0x1e
    163c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    163e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1640:	9b 8f       	std	Y+27, r25	; 0x1b
    1642:	8a 8f       	std	Y+26, r24	; 0x1a
    1644:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1646:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <GLCD_Command+0x19c>
    164c:	9b 8f       	std	Y+27, r25	; 0x1b
    164e:	8a 8f       	std	Y+26, r24	; 0x1a
    1650:	0f c0       	rjmp	.+30     	; 0x1670 <GLCD_Command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1652:	69 a5       	ldd	r22, Y+41	; 0x29
    1654:	7a a5       	ldd	r23, Y+42	; 0x2a
    1656:	8b a5       	ldd	r24, Y+43	; 0x2b
    1658:	9c a5       	ldd	r25, Y+44	; 0x2c
    165a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	88 a7       	std	Y+40, r24	; 0x28
    1664:	88 a5       	ldd	r24, Y+40	; 0x28
    1666:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1668:	89 8d       	ldd	r24, Y+25	; 0x19
    166a:	8a 95       	dec	r24
    166c:	f1 f7       	brne	.-4      	; 0x166a <GLCD_Command+0x1be>
    166e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    1670:	a5 e3       	ldi	r26, 0x35	; 53
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e5 e3       	ldi	r30, 0x35	; 53
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	8b 7f       	andi	r24, 0xFB	; 251
    167c:	8c 93       	st	X, r24
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	a0 ea       	ldi	r26, 0xA0	; 160
    1684:	b0 e4       	ldi	r27, 0x40	; 64
    1686:	8d 8b       	std	Y+21, r24	; 0x15
    1688:	9e 8b       	std	Y+22, r25	; 0x16
    168a:	af 8b       	std	Y+23, r26	; 0x17
    168c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    168e:	6d 89       	ldd	r22, Y+21	; 0x15
    1690:	7e 89       	ldd	r23, Y+22	; 0x16
    1692:	8f 89       	ldd	r24, Y+23	; 0x17
    1694:	98 8d       	ldd	r25, Y+24	; 0x18
    1696:	2b ea       	ldi	r18, 0xAB	; 171
    1698:	3a ea       	ldi	r19, 0xAA	; 170
    169a:	4a e2       	ldi	r20, 0x2A	; 42
    169c:	50 e4       	ldi	r21, 0x40	; 64
    169e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	89 8b       	std	Y+17, r24	; 0x11
    16a8:	9a 8b       	std	Y+18, r25	; 0x12
    16aa:	ab 8b       	std	Y+19, r26	; 0x13
    16ac:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16ae:	69 89       	ldd	r22, Y+17	; 0x11
    16b0:	7a 89       	ldd	r23, Y+18	; 0x12
    16b2:	8b 89       	ldd	r24, Y+19	; 0x13
    16b4:	9c 89       	ldd	r25, Y+20	; 0x14
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e8       	ldi	r20, 0x80	; 128
    16bc:	5f e3       	ldi	r21, 0x3F	; 63
    16be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16c2:	88 23       	and	r24, r24
    16c4:	1c f4       	brge	.+6      	; 0x16cc <GLCD_Command+0x220>
		__ticks = 1;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	88 8b       	std	Y+16, r24	; 0x10
    16ca:	91 c0       	rjmp	.+290    	; 0x17ee <GLCD_Command+0x342>
	else if (__tmp > 255)
    16cc:	69 89       	ldd	r22, Y+17	; 0x11
    16ce:	7a 89       	ldd	r23, Y+18	; 0x12
    16d0:	8b 89       	ldd	r24, Y+19	; 0x13
    16d2:	9c 89       	ldd	r25, Y+20	; 0x14
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4f e7       	ldi	r20, 0x7F	; 127
    16da:	53 e4       	ldi	r21, 0x43	; 67
    16dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16e0:	18 16       	cp	r1, r24
    16e2:	0c f0       	brlt	.+2      	; 0x16e6 <GLCD_Command+0x23a>
    16e4:	7b c0       	rjmp	.+246    	; 0x17dc <GLCD_Command+0x330>
	{
		_delay_ms(__us / 1000.0);
    16e6:	6d 89       	ldd	r22, Y+21	; 0x15
    16e8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ea:	8f 89       	ldd	r24, Y+23	; 0x17
    16ec:	98 8d       	ldd	r25, Y+24	; 0x18
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	4a e7       	ldi	r20, 0x7A	; 122
    16f4:	54 e4       	ldi	r21, 0x44	; 68
    16f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	8c 87       	std	Y+12, r24	; 0x0c
    1700:	9d 87       	std	Y+13, r25	; 0x0d
    1702:	ae 87       	std	Y+14, r26	; 0x0e
    1704:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1706:	6c 85       	ldd	r22, Y+12	; 0x0c
    1708:	7d 85       	ldd	r23, Y+13	; 0x0d
    170a:	8e 85       	ldd	r24, Y+14	; 0x0e
    170c:	9f 85       	ldd	r25, Y+15	; 0x0f
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	4a ef       	ldi	r20, 0xFA	; 250
    1714:	54 e4       	ldi	r21, 0x44	; 68
    1716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	88 87       	std	Y+8, r24	; 0x08
    1720:	99 87       	std	Y+9, r25	; 0x09
    1722:	aa 87       	std	Y+10, r26	; 0x0a
    1724:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1726:	68 85       	ldd	r22, Y+8	; 0x08
    1728:	79 85       	ldd	r23, Y+9	; 0x09
    172a:	8a 85       	ldd	r24, Y+10	; 0x0a
    172c:	9b 85       	ldd	r25, Y+11	; 0x0b
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e8       	ldi	r20, 0x80	; 128
    1734:	5f e3       	ldi	r21, 0x3F	; 63
    1736:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    173a:	88 23       	and	r24, r24
    173c:	2c f4       	brge	.+10     	; 0x1748 <GLCD_Command+0x29c>
		__ticks = 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9f 83       	std	Y+7, r25	; 0x07
    1744:	8e 83       	std	Y+6, r24	; 0x06
    1746:	3f c0       	rjmp	.+126    	; 0x17c6 <GLCD_Command+0x31a>
	else if (__tmp > 65535)
    1748:	68 85       	ldd	r22, Y+8	; 0x08
    174a:	79 85       	ldd	r23, Y+9	; 0x09
    174c:	8a 85       	ldd	r24, Y+10	; 0x0a
    174e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	3f ef       	ldi	r19, 0xFF	; 255
    1754:	4f e7       	ldi	r20, 0x7F	; 127
    1756:	57 e4       	ldi	r21, 0x47	; 71
    1758:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    175c:	18 16       	cp	r1, r24
    175e:	4c f5       	brge	.+82     	; 0x17b2 <GLCD_Command+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1760:	6c 85       	ldd	r22, Y+12	; 0x0c
    1762:	7d 85       	ldd	r23, Y+13	; 0x0d
    1764:	8e 85       	ldd	r24, Y+14	; 0x0e
    1766:	9f 85       	ldd	r25, Y+15	; 0x0f
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e2       	ldi	r20, 0x20	; 32
    176e:	51 e4       	ldi	r21, 0x41	; 65
    1770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	bc 01       	movw	r22, r24
    177a:	cd 01       	movw	r24, r26
    177c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	9f 83       	std	Y+7, r25	; 0x07
    1786:	8e 83       	std	Y+6, r24	; 0x06
    1788:	0f c0       	rjmp	.+30     	; 0x17a8 <GLCD_Command+0x2fc>
    178a:	88 ec       	ldi	r24, 0xC8	; 200
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9d 83       	std	Y+5, r25	; 0x05
    1790:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <GLCD_Command+0x2ea>
    179a:	9d 83       	std	Y+5, r25	; 0x05
    179c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179e:	8e 81       	ldd	r24, Y+6	; 0x06
    17a0:	9f 81       	ldd	r25, Y+7	; 0x07
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	9f 83       	std	Y+7, r25	; 0x07
    17a6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a8:	8e 81       	ldd	r24, Y+6	; 0x06
    17aa:	9f 81       	ldd	r25, Y+7	; 0x07
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	69 f7       	brne	.-38     	; 0x178a <GLCD_Command+0x2de>
    17b0:	24 c0       	rjmp	.+72     	; 0x17fa <GLCD_Command+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b2:	68 85       	ldd	r22, Y+8	; 0x08
    17b4:	79 85       	ldd	r23, Y+9	; 0x09
    17b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    17b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	9f 83       	std	Y+7, r25	; 0x07
    17c4:	8e 83       	std	Y+6, r24	; 0x06
    17c6:	8e 81       	ldd	r24, Y+6	; 0x06
    17c8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ca:	9b 83       	std	Y+3, r25	; 0x03
    17cc:	8a 83       	std	Y+2, r24	; 0x02
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	9b 81       	ldd	r25, Y+3	; 0x03
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <GLCD_Command+0x326>
    17d6:	9b 83       	std	Y+3, r25	; 0x03
    17d8:	8a 83       	std	Y+2, r24	; 0x02
    17da:	0f c0       	rjmp	.+30     	; 0x17fa <GLCD_Command+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17dc:	69 89       	ldd	r22, Y+17	; 0x11
    17de:	7a 89       	ldd	r23, Y+18	; 0x12
    17e0:	8b 89       	ldd	r24, Y+19	; 0x13
    17e2:	9c 89       	ldd	r25, Y+20	; 0x14
    17e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	88 8b       	std	Y+16, r24	; 0x10
    17ee:	88 89       	ldd	r24, Y+16	; 0x10
    17f0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	8a 95       	dec	r24
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <GLCD_Command+0x348>
    17f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    17fa:	e1 96       	adiw	r28, 0x31	; 49
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <GLCD_Data>:

void GLCD_Data(char Data)		/* GLCD data function */
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	e1 97       	sbiw	r28, 0x31	; 49
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Data;		/* Copy data on data pin */
    1822:	eb e3       	ldi	r30, 0x3B	; 59
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	89 a9       	ldd	r24, Y+49	; 0x31
    1828:	80 83       	st	Z, r24
	Command_Port |=  (1 << RS);	/* Make RS HIGH for data register */
    182a:	a5 e3       	ldi	r26, 0x35	; 53
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e5 e3       	ldi	r30, 0x35	; 53
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	81 60       	ori	r24, 0x01	; 1
    1836:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
    1838:	a5 e3       	ldi	r26, 0x35	; 53
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e5 e3       	ldi	r30, 0x35	; 53
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	8d 7f       	andi	r24, 0xFD	; 253
    1844:	8c 93       	st	X, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
    1846:	a5 e3       	ldi	r26, 0x35	; 53
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e5 e3       	ldi	r30, 0x35	; 53
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	84 60       	ori	r24, 0x04	; 4
    1852:	8c 93       	st	X, r24
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 ea       	ldi	r26, 0xA0	; 160
    185a:	b0 e4       	ldi	r27, 0x40	; 64
    185c:	8d a7       	std	Y+45, r24	; 0x2d
    185e:	9e a7       	std	Y+46, r25	; 0x2e
    1860:	af a7       	std	Y+47, r26	; 0x2f
    1862:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1864:	6d a5       	ldd	r22, Y+45	; 0x2d
    1866:	7e a5       	ldd	r23, Y+46	; 0x2e
    1868:	8f a5       	ldd	r24, Y+47	; 0x2f
    186a:	98 a9       	ldd	r25, Y+48	; 0x30
    186c:	2b ea       	ldi	r18, 0xAB	; 171
    186e:	3a ea       	ldi	r19, 0xAA	; 170
    1870:	4a e2       	ldi	r20, 0x2A	; 42
    1872:	50 e4       	ldi	r21, 0x40	; 64
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	89 a7       	std	Y+41, r24	; 0x29
    187e:	9a a7       	std	Y+42, r25	; 0x2a
    1880:	ab a7       	std	Y+43, r26	; 0x2b
    1882:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1884:	69 a5       	ldd	r22, Y+41	; 0x29
    1886:	7a a5       	ldd	r23, Y+42	; 0x2a
    1888:	8b a5       	ldd	r24, Y+43	; 0x2b
    188a:	9c a5       	ldd	r25, Y+44	; 0x2c
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e8       	ldi	r20, 0x80	; 128
    1892:	5f e3       	ldi	r21, 0x3F	; 63
    1894:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1898:	88 23       	and	r24, r24
    189a:	1c f4       	brge	.+6      	; 0x18a2 <GLCD_Data+0x96>
		__ticks = 1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	88 a7       	std	Y+40, r24	; 0x28
    18a0:	91 c0       	rjmp	.+290    	; 0x19c4 <GLCD_Data+0x1b8>
	else if (__tmp > 255)
    18a2:	69 a5       	ldd	r22, Y+41	; 0x29
    18a4:	7a a5       	ldd	r23, Y+42	; 0x2a
    18a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    18a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	53 e4       	ldi	r21, 0x43	; 67
    18b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	0c f0       	brlt	.+2      	; 0x18bc <GLCD_Data+0xb0>
    18ba:	7b c0       	rjmp	.+246    	; 0x19b2 <GLCD_Data+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    18bc:	6d a5       	ldd	r22, Y+45	; 0x2d
    18be:	7e a5       	ldd	r23, Y+46	; 0x2e
    18c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c2:	98 a9       	ldd	r25, Y+48	; 0x30
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	4a e7       	ldi	r20, 0x7A	; 122
    18ca:	54 e4       	ldi	r21, 0x44	; 68
    18cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	8c a3       	std	Y+36, r24	; 0x24
    18d6:	9d a3       	std	Y+37, r25	; 0x25
    18d8:	ae a3       	std	Y+38, r26	; 0x26
    18da:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	6c a1       	ldd	r22, Y+36	; 0x24
    18de:	7d a1       	ldd	r23, Y+37	; 0x25
    18e0:	8e a1       	ldd	r24, Y+38	; 0x26
    18e2:	9f a1       	ldd	r25, Y+39	; 0x27
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4a ef       	ldi	r20, 0xFA	; 250
    18ea:	54 e4       	ldi	r21, 0x44	; 68
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	88 a3       	std	Y+32, r24	; 0x20
    18f6:	99 a3       	std	Y+33, r25	; 0x21
    18f8:	aa a3       	std	Y+34, r26	; 0x22
    18fa:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    18fc:	68 a1       	ldd	r22, Y+32	; 0x20
    18fe:	79 a1       	ldd	r23, Y+33	; 0x21
    1900:	8a a1       	ldd	r24, Y+34	; 0x22
    1902:	9b a1       	ldd	r25, Y+35	; 0x23
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	2c f4       	brge	.+10     	; 0x191e <GLCD_Data+0x112>
		__ticks = 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9f 8f       	std	Y+31, r25	; 0x1f
    191a:	8e 8f       	std	Y+30, r24	; 0x1e
    191c:	3f c0       	rjmp	.+126    	; 0x199c <GLCD_Data+0x190>
	else if (__tmp > 65535)
    191e:	68 a1       	ldd	r22, Y+32	; 0x20
    1920:	79 a1       	ldd	r23, Y+33	; 0x21
    1922:	8a a1       	ldd	r24, Y+34	; 0x22
    1924:	9b a1       	ldd	r25, Y+35	; 0x23
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	3f ef       	ldi	r19, 0xFF	; 255
    192a:	4f e7       	ldi	r20, 0x7F	; 127
    192c:	57 e4       	ldi	r21, 0x47	; 71
    192e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1932:	18 16       	cp	r1, r24
    1934:	4c f5       	brge	.+82     	; 0x1988 <GLCD_Data+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1936:	6c a1       	ldd	r22, Y+36	; 0x24
    1938:	7d a1       	ldd	r23, Y+37	; 0x25
    193a:	8e a1       	ldd	r24, Y+38	; 0x26
    193c:	9f a1       	ldd	r25, Y+39	; 0x27
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9f 8f       	std	Y+31, r25	; 0x1f
    195c:	8e 8f       	std	Y+30, r24	; 0x1e
    195e:	0f c0       	rjmp	.+30     	; 0x197e <GLCD_Data+0x172>
    1960:	88 ec       	ldi	r24, 0xC8	; 200
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9d 8f       	std	Y+29, r25	; 0x1d
    1966:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1968:	8c 8d       	ldd	r24, Y+28	; 0x1c
    196a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <GLCD_Data+0x160>
    1970:	9d 8f       	std	Y+29, r25	; 0x1d
    1972:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1976:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9f 8f       	std	Y+31, r25	; 0x1f
    197c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1980:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f7       	brne	.-38     	; 0x1960 <GLCD_Data+0x154>
    1986:	24 c0       	rjmp	.+72     	; 0x19d0 <GLCD_Data+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	68 a1       	ldd	r22, Y+32	; 0x20
    198a:	79 a1       	ldd	r23, Y+33	; 0x21
    198c:	8a a1       	ldd	r24, Y+34	; 0x22
    198e:	9b a1       	ldd	r25, Y+35	; 0x23
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9f 8f       	std	Y+31, r25	; 0x1f
    199a:	8e 8f       	std	Y+30, r24	; 0x1e
    199c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    199e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19a0:	9b 8f       	std	Y+27, r25	; 0x1b
    19a2:	8a 8f       	std	Y+26, r24	; 0x1a
    19a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <GLCD_Data+0x19c>
    19ac:	9b 8f       	std	Y+27, r25	; 0x1b
    19ae:	8a 8f       	std	Y+26, r24	; 0x1a
    19b0:	0f c0       	rjmp	.+30     	; 0x19d0 <GLCD_Data+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19b2:	69 a5       	ldd	r22, Y+41	; 0x29
    19b4:	7a a5       	ldd	r23, Y+42	; 0x2a
    19b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    19b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	88 a7       	std	Y+40, r24	; 0x28
    19c4:	88 a5       	ldd	r24, Y+40	; 0x28
    19c6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19c8:	89 8d       	ldd	r24, Y+25	; 0x19
    19ca:	8a 95       	dec	r24
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <GLCD_Data+0x1be>
    19ce:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    19d0:	a5 e3       	ldi	r26, 0x35	; 53
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e5 e3       	ldi	r30, 0x35	; 53
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	8b 7f       	andi	r24, 0xFB	; 251
    19dc:	8c 93       	st	X, r24
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	a0 ea       	ldi	r26, 0xA0	; 160
    19e4:	b0 e4       	ldi	r27, 0x40	; 64
    19e6:	8d 8b       	std	Y+21, r24	; 0x15
    19e8:	9e 8b       	std	Y+22, r25	; 0x16
    19ea:	af 8b       	std	Y+23, r26	; 0x17
    19ec:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19ee:	6d 89       	ldd	r22, Y+21	; 0x15
    19f0:	7e 89       	ldd	r23, Y+22	; 0x16
    19f2:	8f 89       	ldd	r24, Y+23	; 0x17
    19f4:	98 8d       	ldd	r25, Y+24	; 0x18
    19f6:	2b ea       	ldi	r18, 0xAB	; 171
    19f8:	3a ea       	ldi	r19, 0xAA	; 170
    19fa:	4a e2       	ldi	r20, 0x2A	; 42
    19fc:	50 e4       	ldi	r21, 0x40	; 64
    19fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	89 8b       	std	Y+17, r24	; 0x11
    1a08:	9a 8b       	std	Y+18, r25	; 0x12
    1a0a:	ab 8b       	std	Y+19, r26	; 0x13
    1a0c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a0e:	69 89       	ldd	r22, Y+17	; 0x11
    1a10:	7a 89       	ldd	r23, Y+18	; 0x12
    1a12:	8b 89       	ldd	r24, Y+19	; 0x13
    1a14:	9c 89       	ldd	r25, Y+20	; 0x14
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e8       	ldi	r20, 0x80	; 128
    1a1c:	5f e3       	ldi	r21, 0x3F	; 63
    1a1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a22:	88 23       	and	r24, r24
    1a24:	1c f4       	brge	.+6      	; 0x1a2c <GLCD_Data+0x220>
		__ticks = 1;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	88 8b       	std	Y+16, r24	; 0x10
    1a2a:	91 c0       	rjmp	.+290    	; 0x1b4e <GLCD_Data+0x342>
	else if (__tmp > 255)
    1a2c:	69 89       	ldd	r22, Y+17	; 0x11
    1a2e:	7a 89       	ldd	r23, Y+18	; 0x12
    1a30:	8b 89       	ldd	r24, Y+19	; 0x13
    1a32:	9c 89       	ldd	r25, Y+20	; 0x14
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	4f e7       	ldi	r20, 0x7F	; 127
    1a3a:	53 e4       	ldi	r21, 0x43	; 67
    1a3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a40:	18 16       	cp	r1, r24
    1a42:	0c f0       	brlt	.+2      	; 0x1a46 <GLCD_Data+0x23a>
    1a44:	7b c0       	rjmp	.+246    	; 0x1b3c <GLCD_Data+0x330>
	{
		_delay_ms(__us / 1000.0);
    1a46:	6d 89       	ldd	r22, Y+21	; 0x15
    1a48:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	4a e7       	ldi	r20, 0x7A	; 122
    1a54:	54 e4       	ldi	r21, 0x44	; 68
    1a56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	8c 87       	std	Y+12, r24	; 0x0c
    1a60:	9d 87       	std	Y+13, r25	; 0x0d
    1a62:	ae 87       	std	Y+14, r26	; 0x0e
    1a64:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a68:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4a ef       	ldi	r20, 0xFA	; 250
    1a74:	54 e4       	ldi	r21, 0x44	; 68
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	88 87       	std	Y+8, r24	; 0x08
    1a80:	99 87       	std	Y+9, r25	; 0x09
    1a82:	aa 87       	std	Y+10, r26	; 0x0a
    1a84:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a86:	68 85       	ldd	r22, Y+8	; 0x08
    1a88:	79 85       	ldd	r23, Y+9	; 0x09
    1a8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	5f e3       	ldi	r21, 0x3F	; 63
    1a96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a9a:	88 23       	and	r24, r24
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <GLCD_Data+0x29c>
		__ticks = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9f 83       	std	Y+7, r25	; 0x07
    1aa4:	8e 83       	std	Y+6, r24	; 0x06
    1aa6:	3f c0       	rjmp	.+126    	; 0x1b26 <GLCD_Data+0x31a>
	else if (__tmp > 65535)
    1aa8:	68 85       	ldd	r22, Y+8	; 0x08
    1aaa:	79 85       	ldd	r23, Y+9	; 0x09
    1aac:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aae:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	57 e4       	ldi	r21, 0x47	; 71
    1ab8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	4c f5       	brge	.+82     	; 0x1b12 <GLCD_Data+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ac2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ac4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ac6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9f 83       	std	Y+7, r25	; 0x07
    1ae6:	8e 83       	std	Y+6, r24	; 0x06
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <GLCD_Data+0x2fc>
    1aea:	88 ec       	ldi	r24, 0xC8	; 200
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9d 83       	std	Y+5, r25	; 0x05
    1af0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	9d 81       	ldd	r25, Y+5	; 0x05
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <GLCD_Data+0x2ea>
    1afa:	9d 83       	std	Y+5, r25	; 0x05
    1afc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8e 81       	ldd	r24, Y+6	; 0x06
    1b00:	9f 81       	ldd	r25, Y+7	; 0x07
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	9f 83       	std	Y+7, r25	; 0x07
    1b06:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <GLCD_Data+0x2de>
    1b10:	24 c0       	rjmp	.+72     	; 0x1b5a <GLCD_Data+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	68 85       	ldd	r22, Y+8	; 0x08
    1b14:	79 85       	ldd	r23, Y+9	; 0x09
    1b16:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b18:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9f 83       	std	Y+7, r25	; 0x07
    1b24:	8e 83       	std	Y+6, r24	; 0x06
    1b26:	8e 81       	ldd	r24, Y+6	; 0x06
    1b28:	9f 81       	ldd	r25, Y+7	; 0x07
    1b2a:	9b 83       	std	Y+3, r25	; 0x03
    1b2c:	8a 83       	std	Y+2, r24	; 0x02
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	9b 81       	ldd	r25, Y+3	; 0x03
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <GLCD_Data+0x326>
    1b36:	9b 83       	std	Y+3, r25	; 0x03
    1b38:	8a 83       	std	Y+2, r24	; 0x02
    1b3a:	0f c0       	rjmp	.+30     	; 0x1b5a <GLCD_Data+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b3c:	69 89       	ldd	r22, Y+17	; 0x11
    1b3e:	7a 89       	ldd	r23, Y+18	; 0x12
    1b40:	8b 89       	ldd	r24, Y+19	; 0x13
    1b42:	9c 89       	ldd	r25, Y+20	; 0x14
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	88 8b       	std	Y+16, r24	; 0x10
    1b4e:	88 89       	ldd	r24, Y+16	; 0x10
    1b50:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	8a 95       	dec	r24
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <GLCD_Data+0x348>
    1b58:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    1b5a:	e1 96       	adiw	r28, 0x31	; 49
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <GLCD_Init>:

void GLCD_Init()			/* GLCD initialize function */
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	2e 97       	sbiw	r28, 0x0e	; 14
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
	Data_Port_Dir = 0xFF;
    1b80:	ea e3       	ldi	r30, 0x3A	; 58
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	8f ef       	ldi	r24, 0xFF	; 255
    1b86:	80 83       	st	Z, r24
	Command_Port_Dir = 0xFF;
    1b88:	e4 e3       	ldi	r30, 0x34	; 52
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
    1b8e:	80 83       	st	Z, r24
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
    1b90:	a5 e3       	ldi	r26, 0x35	; 53
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e5 e3       	ldi	r30, 0x35	; 53
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 63       	ori	r24, 0x38	; 56
    1b9c:	8c 93       	st	X, r24
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a0 ea       	ldi	r26, 0xA0	; 160
    1ba4:	b1 e4       	ldi	r27, 0x41	; 65
    1ba6:	8b 87       	std	Y+11, r24	; 0x0b
    1ba8:	9c 87       	std	Y+12, r25	; 0x0c
    1baa:	ad 87       	std	Y+13, r26	; 0x0d
    1bac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	4a ef       	ldi	r20, 0xFA	; 250
    1bbc:	54 e4       	ldi	r21, 0x44	; 68
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	8f 83       	std	Y+7, r24	; 0x07
    1bc8:	98 87       	std	Y+8, r25	; 0x08
    1bca:	a9 87       	std	Y+9, r26	; 0x09
    1bcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bce:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd0:	78 85       	ldd	r23, Y+8	; 0x08
    1bd2:	89 85       	ldd	r24, Y+9	; 0x09
    1bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e8       	ldi	r20, 0x80	; 128
    1bdc:	5f e3       	ldi	r21, 0x3F	; 63
    1bde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be2:	88 23       	and	r24, r24
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <GLCD_Init+0x84>
		__ticks = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9e 83       	std	Y+6, r25	; 0x06
    1bec:	8d 83       	std	Y+5, r24	; 0x05
    1bee:	3f c0       	rjmp	.+126    	; 0x1c6e <GLCD_Init+0x102>
	else if (__tmp > 65535)
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	78 85       	ldd	r23, Y+8	; 0x08
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	3f ef       	ldi	r19, 0xFF	; 255
    1bfc:	4f e7       	ldi	r20, 0x7F	; 127
    1bfe:	57 e4       	ldi	r21, 0x47	; 71
    1c00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c04:	18 16       	cp	r1, r24
    1c06:	4c f5       	brge	.+82     	; 0x1c5a <GLCD_Init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e2       	ldi	r20, 0x20	; 32
    1c16:	51 e4       	ldi	r21, 0x41	; 65
    1c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	0f c0       	rjmp	.+30     	; 0x1c50 <GLCD_Init+0xe4>
    1c32:	88 ec       	ldi	r24, 0xC8	; 200
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9c 83       	std	Y+4, r25	; 0x04
    1c38:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <GLCD_Init+0xd2>
    1c42:	9c 83       	std	Y+4, r25	; 0x04
    1c44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c46:	8d 81       	ldd	r24, Y+5	; 0x05
    1c48:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	9e 83       	std	Y+6, r25	; 0x06
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	69 f7       	brne	.-38     	; 0x1c32 <GLCD_Init+0xc6>
    1c58:	14 c0       	rjmp	.+40     	; 0x1c82 <GLCD_Init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5c:	78 85       	ldd	r23, Y+8	; 0x08
    1c5e:	89 85       	ldd	r24, Y+9	; 0x09
    1c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9e 83       	std	Y+6, r25	; 0x06
    1c6c:	8d 83       	std	Y+5, r24	; 0x05
    1c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c70:	9e 81       	ldd	r25, Y+6	; 0x06
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <GLCD_Init+0x10e>
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	GLCD_Command(0x3E);		/* Display OFF */
    1c82:	8e e3       	ldi	r24, 0x3E	; 62
    1c84:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
	GLCD_Command(0x40);		/* Set Y address (column=0) */
    1c88:	80 e4       	ldi	r24, 0x40	; 64
    1c8a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
    1c8e:	88 eb       	ldi	r24, 0xB8	; 184
    1c90:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
	GLCD_Command(0xB9);		/* Set x address (page=1) */
    1c94:	89 eb       	ldi	r24, 0xB9	; 185
    1c96:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
	GLCD_Command(0xBD);		/* Set x address (page=5) */
    1c9a:	8d eb       	ldi	r24, 0xBD	; 189
    1c9c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>

	GLCD_Command(0xC0);		/* Set z address (start line=0) */
    1ca0:	80 ec       	ldi	r24, 0xC0	; 192
    1ca2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
	GLCD_Command(0x3F);		/* Display ON */
    1ca6:	8f e3       	ldi	r24, 0x3F	; 63
    1ca8:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
}
    1cac:	2e 96       	adiw	r28, 0x0e	; 14
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <GLCD_ClearAll>:

void GLCD_ClearAll()			/* GLCD all display clear function */
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <GLCD_ClearAll+0x6>
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <GLCD_ClearAll+0x8>
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
    1cca:	a5 e3       	ldi	r26, 0x35	; 53
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e5 e3       	ldi	r30, 0x35	; 53
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	88 61       	ori	r24, 0x18	; 24
    1cd6:	8c 93       	st	X, r24
	for(i = 0; i < TotalPage; i++)
    1cd8:	1c 82       	std	Y+4, r1	; 0x04
    1cda:	1b 82       	std	Y+3, r1	; 0x03
    1cdc:	19 c0       	rjmp	.+50     	; 0x1d10 <GLCD_ClearAll+0x52>
	{
		GLCD_Command((0xB8) + i);/* Increment page */
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	88 54       	subi	r24, 0x48	; 72
    1ce2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
		for(j = 0; j < 64; j++)
    1ce6:	1a 82       	std	Y+2, r1	; 0x02
    1ce8:	19 82       	std	Y+1, r1	; 0x01
    1cea:	08 c0       	rjmp	.+16     	; 0x1cfc <GLCD_ClearAll+0x3e>
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	0e 94 06 0c 	call	0x180c	; 0x180c <GLCD_Data>
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);/* Increment page */
		for(j = 0; j < 64; j++)
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1d00:	80 34       	cpi	r24, 0x40	; 64
    1d02:	91 05       	cpc	r25, r1
    1d04:	9c f3       	brlt	.-26     	; 0x1cec <GLCD_ClearAll+0x2e>
void GLCD_ClearAll()			/* GLCD all display clear function */
{
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	9c 83       	std	Y+4, r25	; 0x04
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	9c 81       	ldd	r25, Y+4	; 0x04
    1d14:	88 30       	cpi	r24, 0x08	; 8
    1d16:	91 05       	cpc	r25, r1
    1d18:	14 f3       	brlt	.-60     	; 0x1cde <GLCD_ClearAll+0x20>
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
		}
	}
	GLCD_Command(0x40);		/* Set Y address (column=0) */
    1d1a:	80 e4       	ldi	r24, 0x40	; 64
    1d1c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
    1d20:	88 eb       	ldi	r24, 0xB8	; 184
    1d22:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
}
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <GLCD_String>:

void GLCD_String(char page_no, char *str)/* GLCD string write function */
{
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	2f 97       	sbiw	r28, 0x0f	; 15
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	8d 87       	std	Y+13, r24	; 0x0d
    1d4e:	7f 87       	std	Y+15, r23	; 0x0f
    1d50:	6e 87       	std	Y+14, r22	; 0x0e
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
    1d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	88 54       	subi	r24, 0x48	; 72
    1d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5c:	98 87       	std	Y+8, r25	; 0x08
    1d5e:	8f 83       	std	Y+7, r24	; 0x07
	unsigned int Y_address = 0;
    1d60:	1e 82       	std	Y+6, r1	; 0x06
    1d62:	1d 82       	std	Y+5, r1	; 0x05
	float Page_inc = 0.5;
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 e0       	ldi	r26, 0x00	; 0
    1d6a:	bf e3       	ldi	r27, 0x3F	; 63
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	ab 83       	std	Y+3, r26	; 0x03
    1d72:	bc 83       	std	Y+4, r27	; 0x04

	Command_Port |= (1 << CS1);	/* Select Left half of display */
    1d74:	a5 e3       	ldi	r26, 0x35	; 53
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e5 e3       	ldi	r30, 0x35	; 53
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	88 60       	ori	r24, 0x08	; 8
    1d80:	8c 93       	st	X, r24
	Command_Port &= ~(1 << CS2);
    1d82:	a5 e3       	ldi	r26, 0x35	; 53
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e5 e3       	ldi	r30, 0x35	; 53
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8f 7e       	andi	r24, 0xEF	; 239
    1d8e:	8c 93       	st	X, r24
	/*now i will shift to the cs2 half*/
	Command_Port |= (1 << CS2);	/* Select right half of display */
    1d90:	a5 e3       	ldi	r26, 0x35	; 53
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e5 e3       	ldi	r30, 0x35	; 53
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 61       	ori	r24, 0x10	; 16
    1d9c:	8c 93       	st	X, r24
	Command_Port &= ~(1 << CS1);
    1d9e:	a5 e3       	ldi	r26, 0x35	; 53
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e5 e3       	ldi	r30, 0x35	; 53
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	87 7f       	andi	r24, 0xF7	; 247
    1daa:	8c 93       	st	X, r24

	GLCD_Command(Page);
    1dac:	8f 81       	ldd	r24, Y+7	; 0x07
    1dae:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
    1db2:	1c 86       	std	Y+12, r1	; 0x0c
    1db4:	1b 86       	std	Y+11, r1	; 0x0b
    1db6:	65 c2       	rjmp	.+1226   	; 0x2282 <GLCD_String+0x54e>
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
    1db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	96 95       	lsr	r25
    1dc0:	98 2f       	mov	r25, r24
    1dc2:	88 27       	eor	r24, r24
    1dc4:	97 95       	ror	r25
    1dc6:	87 95       	ror	r24
    1dc8:	90 95       	com	r25
    1dca:	81 95       	neg	r24
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	85 50       	subi	r24, 0x05	; 5
    1dd0:	9c 4f       	sbci	r25, 0xFC	; 252
    1dd2:	9c 01       	movw	r18, r24
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	28 17       	cp	r18, r24
    1dda:	39 07       	cpc	r19, r25
    1ddc:	08 f4       	brcc	.+2      	; 0x1de0 <GLCD_String+0xac>
    1dde:	5c c2       	rjmp	.+1208   	; 0x2298 <GLCD_String+0x564>
		break;
		if (str[i]!=32)
    1de0:	2e 85       	ldd	r18, Y+14	; 0x0e
    1de2:	3f 85       	ldd	r19, Y+15	; 0x0f
    1de4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1de6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1de8:	f9 01       	movw	r30, r18
    1dea:	e8 0f       	add	r30, r24
    1dec:	f9 1f       	adc	r31, r25
    1dee:	80 81       	ld	r24, Z
    1df0:	80 32       	cpi	r24, 0x20	; 32
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <GLCD_String+0xc2>
    1df4:	cf c0       	rjmp	.+414    	; 0x1f94 <GLCD_String+0x260>
		{
			for (column=1; column<=FontWidth; column++)
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9a 87       	std	Y+10, r25	; 0x0a
    1dfc:	89 87       	std	Y+9, r24	; 0x09
    1dfe:	c4 c0       	rjmp	.+392    	; 0x1f88 <GLCD_String+0x254>
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
    1e00:	2d 81       	ldd	r18, Y+5	; 0x05
    1e02:	3e 81       	ldd	r19, Y+6	; 0x06
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	89 01       	movw	r16, r18
    1e0a:	08 0f       	add	r16, r24
    1e0c:	19 1f       	adc	r17, r25
    1e0e:	69 81       	ldd	r22, Y+1	; 0x01
    1e10:	7a 81       	ldd	r23, Y+2	; 0x02
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	9c 81       	ldd	r25, Y+4	; 0x04
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	5f e3       	ldi	r21, 0x3F	; 63
    1e1e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	96 95       	lsr	r25
    1e34:	98 2f       	mov	r25, r24
    1e36:	88 27       	eor	r24, r24
    1e38:	97 95       	ror	r25
    1e3a:	87 95       	ror	r24
    1e3c:	08 17       	cp	r16, r24
    1e3e:	19 07       	cpc	r17, r25
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <GLCD_String+0x110>
    1e42:	4f c0       	rjmp	.+158    	; 0x1ee2 <GLCD_String+0x1ae>
				{
					if (column == FontWidth)
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e48:	85 30       	cpi	r24, 0x05	; 5
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <GLCD_String+0x11c>
    1e4e:	a2 c0       	rjmp	.+324    	; 0x1f94 <GLCD_String+0x260>
					break;
					GLCD_Command(0x40);
    1e50:	80 e4       	ldi	r24, 0x40	; 64
    1e52:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
					Y_address = Y_address + column;
    1e56:	2d 81       	ldd	r18, Y+5	; 0x05
    1e58:	3e 81       	ldd	r19, Y+6	; 0x06
    1e5a:	89 85       	ldd	r24, Y+9	; 0x09
    1e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5e:	82 0f       	add	r24, r18
    1e60:	93 1f       	adc	r25, r19
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
					Command_Port ^= (1 << CS1);
    1e66:	a5 e3       	ldi	r26, 0x35	; 53
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e5 e3       	ldi	r30, 0x35	; 53
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	90 81       	ld	r25, Z
    1e70:	88 e0       	ldi	r24, 0x08	; 8
    1e72:	89 27       	eor	r24, r25
    1e74:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    1e76:	a5 e3       	ldi	r26, 0x35	; 53
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e3       	ldi	r30, 0x35	; 53
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	90 81       	ld	r25, Z
    1e80:	80 e1       	ldi	r24, 0x10	; 16
    1e82:	89 27       	eor	r24, r25
    1e84:	8c 93       	st	X, r24
					GLCD_Command(Page + Page_inc);
    1e86:	8f 81       	ldd	r24, Y+7	; 0x07
    1e88:	98 85       	ldd	r25, Y+8	; 0x08
    1e8a:	cc 01       	movw	r24, r24
    1e8c:	a0 e0       	ldi	r26, 0x00	; 0
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	29 81       	ldd	r18, Y+1	; 0x01
    1ea2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ea4:	4b 81       	ldd	r20, Y+3	; 0x03
    1ea6:	5c 81       	ldd	r21, Y+4	; 0x04
    1ea8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    1ec0:	69 81       	ldd	r22, Y+1	; 0x01
    1ec2:	7a 81       	ldd	r23, Y+2	; 0x02
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	5f e3       	ldi	r21, 0x3F	; 63
    1ed0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	9a 83       	std	Y+2, r25	; 0x02
    1edc:	ab 83       	std	Y+3, r26	; 0x03
    1ede:	bc 83       	std	Y+4, r27	; 0x04
    1ee0:	4e c0       	rjmp	.+156    	; 0x1f7e <GLCD_String+0x24a>
				}
				else
				{

					if (column == FontWidth)
    1ee2:	89 85       	ldd	r24, Y+9	; 0x09
    1ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee6:	85 30       	cpi	r24, 0x05	; 5
    1ee8:	91 05       	cpc	r25, r1
    1eea:	09 f4       	brne	.+2      	; 0x1eee <GLCD_String+0x1ba>
    1eec:	53 c0       	rjmp	.+166    	; 0x1f94 <GLCD_String+0x260>
					break;
					GLCD_Command(0x40);
    1eee:	80 e4       	ldi	r24, 0x40	; 64
    1ef0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
					Y_address = Y_address + column;
    1ef4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ef6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ef8:	89 85       	ldd	r24, Y+9	; 0x09
    1efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efc:	82 0f       	add	r24, r18
    1efe:	93 1f       	adc	r25, r19
    1f00:	9e 83       	std	Y+6, r25	; 0x06
    1f02:	8d 83       	std	Y+5, r24	; 0x05
					Command_Port ^= (1 << CS2);
    1f04:	a5 e3       	ldi	r26, 0x35	; 53
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e5 e3       	ldi	r30, 0x35	; 53
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	90 81       	ld	r25, Z
    1f0e:	80 e1       	ldi	r24, 0x10	; 16
    1f10:	89 27       	eor	r24, r25
    1f12:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS1);
    1f14:	a5 e3       	ldi	r26, 0x35	; 53
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e5 e3       	ldi	r30, 0x35	; 53
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	90 81       	ld	r25, Z
    1f1e:	88 e0       	ldi	r24, 0x08	; 8
    1f20:	89 27       	eor	r24, r25
    1f22:	8c 93       	st	X, r24
					GLCD_Command(Page + Page_inc);
    1f24:	8f 81       	ldd	r24, Y+7	; 0x07
    1f26:	98 85       	ldd	r25, Y+8	; 0x08
    1f28:	cc 01       	movw	r24, r24
    1f2a:	a0 e0       	ldi	r26, 0x00	; 0
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	bc 01       	movw	r22, r24
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	29 81       	ldd	r18, Y+1	; 0x01
    1f40:	3a 81       	ldd	r19, Y+2	; 0x02
    1f42:	4b 81       	ldd	r20, Y+3	; 0x03
    1f44:	5c 81       	ldd	r21, Y+4	; 0x04
    1f46:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    1f5e:	69 81       	ldd	r22, Y+1	; 0x01
    1f60:	7a 81       	ldd	r23, Y+2	; 0x02
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	ab 83       	std	Y+3, r26	; 0x03
    1f7c:	bc 83       	std	Y+4, r27	; 0x04
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
		break;
		if (str[i]!=32)
		{
			for (column=1; column<=FontWidth; column++)
    1f7e:	89 85       	ldd	r24, Y+9	; 0x09
    1f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f82:	01 96       	adiw	r24, 0x01	; 1
    1f84:	9a 87       	std	Y+10, r25	; 0x0a
    1f86:	89 87       	std	Y+9, r24	; 0x09
    1f88:	89 85       	ldd	r24, Y+9	; 0x09
    1f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8c:	86 30       	cpi	r24, 0x06	; 6
    1f8e:	91 05       	cpc	r25, r1
    1f90:	08 f4       	brcc	.+2      	; 0x1f94 <GLCD_String+0x260>
    1f92:	36 cf       	rjmp	.-404    	; 0x1e00 <GLCD_String+0xcc>
					GLCD_Command(Page + Page_inc);
					Page_inc = Page_inc + 0.5;
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
    1f94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	96 95       	lsr	r25
    1f9c:	98 2f       	mov	r25, r24
    1f9e:	88 27       	eor	r24, r24
    1fa0:	97 95       	ror	r25
    1fa2:	87 95       	ror	r24
    1fa4:	90 95       	com	r25
    1fa6:	81 95       	neg	r24
    1fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1faa:	85 50       	subi	r24, 0x05	; 5
    1fac:	9c 4f       	sbci	r25, 0xFC	; 252
    1fae:	9c 01       	movw	r18, r24
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	28 17       	cp	r18, r24
    1fb6:	39 07       	cpc	r19, r25
    1fb8:	08 f4       	brcc	.+2      	; 0x1fbc <GLCD_String+0x288>
    1fba:	6e c1       	rjmp	.+732    	; 0x2298 <GLCD_String+0x564>
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
    1fbc:	2e 85       	ldd	r18, Y+14	; 0x0e
    1fbe:	3f 85       	ldd	r19, Y+15	; 0x0f
    1fc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fc4:	f9 01       	movw	r30, r18
    1fc6:	e8 0f       	add	r30, r24
    1fc8:	f9 1f       	adc	r31, r25
    1fca:	80 81       	ld	r24, Z
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	c9 01       	movw	r24, r18
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	82 0f       	add	r24, r18
    1fd8:	93 1f       	adc	r25, r19
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	82 0f       	add	r24, r18
    1fe8:	93 1f       	adc	r25, r19
    1fea:	8c 50       	subi	r24, 0x0C	; 12
    1fec:	93 40       	sbci	r25, 0x03	; 3
    1fee:	8d 58       	subi	r24, 0x8D	; 141
    1ff0:	9e 4f       	sbci	r25, 0xFE	; 254
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	59 f0       	breq	.+22     	; 0x200c <GLCD_String+0x2d8>
    1ff6:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ff8:	3f 85       	ldd	r19, Y+15	; 0x0f
    1ffa:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ffc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ffe:	f9 01       	movw	r30, r18
    2000:	e8 0f       	add	r30, r24
    2002:	f9 1f       	adc	r31, r25
    2004:	80 81       	ld	r24, Z
    2006:	80 32       	cpi	r24, 0x20	; 32
    2008:	09 f0       	breq	.+2      	; 0x200c <GLCD_String+0x2d8>
    200a:	76 c0       	rjmp	.+236    	; 0x20f8 <GLCD_String+0x3c4>
		{
			for(column=0; column<FontWidth; column++)
    200c:	1a 86       	std	Y+10, r1	; 0x0a
    200e:	19 86       	std	Y+9, r1	; 0x09
    2010:	6c c0       	rjmp	.+216    	; 0x20ea <GLCD_String+0x3b6>
			{
				GLCD_Data(font[str[i]-32][column]);
    2012:	2e 85       	ldd	r18, Y+14	; 0x0e
    2014:	3f 85       	ldd	r19, Y+15	; 0x0f
    2016:	8b 85       	ldd	r24, Y+11	; 0x0b
    2018:	9c 85       	ldd	r25, Y+12	; 0x0c
    201a:	f9 01       	movw	r30, r18
    201c:	e8 0f       	add	r30, r24
    201e:	f9 1f       	adc	r31, r25
    2020:	80 81       	ld	r24, Z
    2022:	88 2f       	mov	r24, r24
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9c 01       	movw	r18, r24
    2028:	20 52       	subi	r18, 0x20	; 32
    202a:	30 40       	sbci	r19, 0x00	; 0
    202c:	49 85       	ldd	r20, Y+9	; 0x09
    202e:	5a 85       	ldd	r21, Y+10	; 0x0a
    2030:	c9 01       	movw	r24, r18
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	82 0f       	add	r24, r18
    203c:	93 1f       	adc	r25, r19
    203e:	84 0f       	add	r24, r20
    2040:	95 1f       	adc	r25, r21
    2042:	fc 01       	movw	r30, r24
    2044:	ed 58       	subi	r30, 0x8D	; 141
    2046:	fe 4f       	sbci	r31, 0xFE	; 254
    2048:	80 81       	ld	r24, Z
    204a:	0e 94 06 0c 	call	0x180c	; 0x180c <GLCD_Data>
				if((Y_address+1)%64==0)
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	9e 81       	ldd	r25, Y+6	; 0x06
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	8f 73       	andi	r24, 0x3F	; 63
    2056:	90 70       	andi	r25, 0x00	; 0
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	e9 f5       	brne	.+122    	; 0x20d6 <GLCD_String+0x3a2>
				{
					Command_Port ^= (1 << CS1);
    205c:	a5 e3       	ldi	r26, 0x35	; 53
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e5 e3       	ldi	r30, 0x35	; 53
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	90 81       	ld	r25, Z
    2066:	88 e0       	ldi	r24, 0x08	; 8
    2068:	89 27       	eor	r24, r25
    206a:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    206c:	a5 e3       	ldi	r26, 0x35	; 53
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e5 e3       	ldi	r30, 0x35	; 53
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	90 81       	ld	r25, Z
    2076:	80 e1       	ldi	r24, 0x10	; 16
    2078:	89 27       	eor	r24, r25
    207a:	8c 93       	st	X, r24
					GLCD_Command((Page+Page_inc));
    207c:	8f 81       	ldd	r24, Y+7	; 0x07
    207e:	98 85       	ldd	r25, Y+8	; 0x08
    2080:	cc 01       	movw	r24, r24
    2082:	a0 e0       	ldi	r26, 0x00	; 0
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	29 81       	ldd	r18, Y+1	; 0x01
    2098:	3a 81       	ldd	r19, Y+2	; 0x02
    209a:	4b 81       	ldd	r20, Y+3	; 0x03
    209c:	5c 81       	ldd	r21, Y+4	; 0x04
    209e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    20b6:	69 81       	ldd	r22, Y+1	; 0x01
    20b8:	7a 81       	ldd	r23, Y+2	; 0x02
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	9c 81       	ldd	r25, Y+4	; 0x04
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	5f e3       	ldi	r21, 0x3F	; 63
    20c6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	89 83       	std	Y+1, r24	; 0x01
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	ab 83       	std	Y+3, r26	; 0x03
    20d4:	bc 83       	std	Y+4, r27	; 0x04
				}
				Y_address++;
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	01 96       	adiw	r24, 0x01	; 1
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
		{
			for(column=0; column<FontWidth; column++)
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	9a 87       	std	Y+10, r25	; 0x0a
    20e8:	89 87       	std	Y+9, r24	; 0x09
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	85 30       	cpi	r24, 0x05	; 5
    20f0:	91 05       	cpc	r25, r1
    20f2:	08 f4       	brcc	.+2      	; 0x20f6 <GLCD_String+0x3c2>
    20f4:	8e cf       	rjmp	.-228    	; 0x2012 <GLCD_String+0x2de>
    20f6:	c0 c0       	rjmp	.+384    	; 0x2278 <GLCD_String+0x544>
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
    20f8:	1a 86       	std	Y+10, r1	; 0x0a
    20fa:	19 86       	std	Y+9, r1	; 0x09
    20fc:	6c c0       	rjmp	.+216    	; 0x21d6 <GLCD_String+0x4a2>
			{
				GLCD_Data(font[str[i]-32][column]);
    20fe:	2e 85       	ldd	r18, Y+14	; 0x0e
    2100:	3f 85       	ldd	r19, Y+15	; 0x0f
    2102:	8b 85       	ldd	r24, Y+11	; 0x0b
    2104:	9c 85       	ldd	r25, Y+12	; 0x0c
    2106:	f9 01       	movw	r30, r18
    2108:	e8 0f       	add	r30, r24
    210a:	f9 1f       	adc	r31, r25
    210c:	80 81       	ld	r24, Z
    210e:	88 2f       	mov	r24, r24
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9c 01       	movw	r18, r24
    2114:	20 52       	subi	r18, 0x20	; 32
    2116:	30 40       	sbci	r19, 0x00	; 0
    2118:	49 85       	ldd	r20, Y+9	; 0x09
    211a:	5a 85       	ldd	r21, Y+10	; 0x0a
    211c:	c9 01       	movw	r24, r18
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	82 0f       	add	r24, r18
    2128:	93 1f       	adc	r25, r19
    212a:	84 0f       	add	r24, r20
    212c:	95 1f       	adc	r25, r21
    212e:	fc 01       	movw	r30, r24
    2130:	ed 58       	subi	r30, 0x8D	; 141
    2132:	fe 4f       	sbci	r31, 0xFE	; 254
    2134:	80 81       	ld	r24, Z
    2136:	0e 94 06 0c 	call	0x180c	; 0x180c <GLCD_Data>
				if((Y_address+1)%64==0)
    213a:	8d 81       	ldd	r24, Y+5	; 0x05
    213c:	9e 81       	ldd	r25, Y+6	; 0x06
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	8f 73       	andi	r24, 0x3F	; 63
    2142:	90 70       	andi	r25, 0x00	; 0
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	e9 f5       	brne	.+122    	; 0x21c2 <GLCD_String+0x48e>
				{
					Command_Port ^= (1 << CS1);
    2148:	a5 e3       	ldi	r26, 0x35	; 53
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e5 e3       	ldi	r30, 0x35	; 53
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	90 81       	ld	r25, Z
    2152:	88 e0       	ldi	r24, 0x08	; 8
    2154:	89 27       	eor	r24, r25
    2156:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    2158:	a5 e3       	ldi	r26, 0x35	; 53
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e5 e3       	ldi	r30, 0x35	; 53
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	90 81       	ld	r25, Z
    2162:	80 e1       	ldi	r24, 0x10	; 16
    2164:	89 27       	eor	r24, r25
    2166:	8c 93       	st	X, r24
					GLCD_Command((Page+Page_inc));
    2168:	8f 81       	ldd	r24, Y+7	; 0x07
    216a:	98 85       	ldd	r25, Y+8	; 0x08
    216c:	cc 01       	movw	r24, r24
    216e:	a0 e0       	ldi	r26, 0x00	; 0
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	bc 01       	movw	r22, r24
    2174:	cd 01       	movw	r24, r26
    2176:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	29 81       	ldd	r18, Y+1	; 0x01
    2184:	3a 81       	ldd	r19, Y+2	; 0x02
    2186:	4b 81       	ldd	r20, Y+3	; 0x03
    2188:	5c 81       	ldd	r21, Y+4	; 0x04
    218a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    21a2:	69 81       	ldd	r22, Y+1	; 0x01
    21a4:	7a 81       	ldd	r23, Y+2	; 0x02
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	5f e3       	ldi	r21, 0x3F	; 63
    21b2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	89 83       	std	Y+1, r24	; 0x01
    21bc:	9a 83       	std	Y+2, r25	; 0x02
    21be:	ab 83       	std	Y+3, r26	; 0x03
    21c0:	bc 83       	std	Y+4, r27	; 0x04
				}
				Y_address++;
    21c2:	8d 81       	ldd	r24, Y+5	; 0x05
    21c4:	9e 81       	ldd	r25, Y+6	; 0x06
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	9e 83       	std	Y+6, r25	; 0x06
    21ca:	8d 83       	std	Y+5, r24	; 0x05
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
    21cc:	89 85       	ldd	r24, Y+9	; 0x09
    21ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d0:	01 96       	adiw	r24, 0x01	; 1
    21d2:	9a 87       	std	Y+10, r25	; 0x0a
    21d4:	89 87       	std	Y+9, r24	; 0x09
    21d6:	89 85       	ldd	r24, Y+9	; 0x09
    21d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21da:	85 30       	cpi	r24, 0x05	; 5
    21dc:	91 05       	cpc	r25, r1
    21de:	08 f4       	brcc	.+2      	; 0x21e2 <GLCD_String+0x4ae>
    21e0:	8e cf       	rjmp	.-228    	; 0x20fe <GLCD_String+0x3ca>
					GLCD_Command((Page+Page_inc));
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
			GLCD_Data(0);
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	0e 94 06 0c 	call	0x180c	; 0x180c <GLCD_Data>
			Y_address++;
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	9e 81       	ldd	r25, Y+6	; 0x06
    21ec:	01 96       	adiw	r24, 0x01	; 1
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
			if((Y_address)%64 == 0)
    21f2:	8d 81       	ldd	r24, Y+5	; 0x05
    21f4:	9e 81       	ldd	r25, Y+6	; 0x06
    21f6:	8f 73       	andi	r24, 0x3F	; 63
    21f8:	90 70       	andi	r25, 0x00	; 0
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	e9 f5       	brne	.+122    	; 0x2278 <GLCD_String+0x544>
			{
				Command_Port ^= (1 << CS1);
    21fe:	a5 e3       	ldi	r26, 0x35	; 53
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e5 e3       	ldi	r30, 0x35	; 53
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	90 81       	ld	r25, Z
    2208:	88 e0       	ldi	r24, 0x08	; 8
    220a:	89 27       	eor	r24, r25
    220c:	8c 93       	st	X, r24
				Command_Port ^= (1 << CS2);
    220e:	a5 e3       	ldi	r26, 0x35	; 53
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e5 e3       	ldi	r30, 0x35	; 53
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	90 81       	ld	r25, Z
    2218:	80 e1       	ldi	r24, 0x10	; 16
    221a:	89 27       	eor	r24, r25
    221c:	8c 93       	st	X, r24
				GLCD_Command((Page+Page_inc));
    221e:	8f 81       	ldd	r24, Y+7	; 0x07
    2220:	98 85       	ldd	r25, Y+8	; 0x08
    2222:	cc 01       	movw	r24, r24
    2224:	a0 e0       	ldi	r26, 0x00	; 0
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	bc 01       	movw	r22, r24
    222a:	cd 01       	movw	r24, r26
    222c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	29 81       	ldd	r18, Y+1	; 0x01
    223a:	3a 81       	ldd	r19, Y+2	; 0x02
    223c:	4b 81       	ldd	r20, Y+3	; 0x03
    223e:	5c 81       	ldd	r21, Y+4	; 0x04
    2240:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
				Page_inc = Page_inc + 0.5;
    2258:	69 81       	ldd	r22, Y+1	; 0x01
    225a:	7a 81       	ldd	r23, Y+2	; 0x02
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	ab 83       	std	Y+3, r26	; 0x03
    2276:	bc 83       	std	Y+4, r27	; 0x04
	/*now i will shift to the cs2 half*/
	Command_Port |= (1 << CS2);	/* Select right half of display */
	Command_Port &= ~(1 << CS1);

	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
    2278:	8b 85       	ldd	r24, Y+11	; 0x0b
    227a:	9c 85       	ldd	r25, Y+12	; 0x0c
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	9c 87       	std	Y+12, r25	; 0x0c
    2280:	8b 87       	std	Y+11, r24	; 0x0b
    2282:	2e 85       	ldd	r18, Y+14	; 0x0e
    2284:	3f 85       	ldd	r19, Y+15	; 0x0f
    2286:	8b 85       	ldd	r24, Y+11	; 0x0b
    2288:	9c 85       	ldd	r25, Y+12	; 0x0c
    228a:	f9 01       	movw	r30, r18
    228c:	e8 0f       	add	r30, r24
    228e:	f9 1f       	adc	r31, r25
    2290:	80 81       	ld	r24, Z
    2292:	88 23       	and	r24, r24
    2294:	09 f0       	breq	.+2      	; 0x2298 <GLCD_String+0x564>
    2296:	90 cd       	rjmp	.-1248   	; 0x1db8 <GLCD_String+0x84>
				GLCD_Command((Page+Page_inc));
				Page_inc = Page_inc + 0.5;
			}
		}
	}
	GLCD_Command(0x40);	/* Set Y address (column=0) */
    2298:	80 e4       	ldi	r24, 0x40	; 64
    229a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_Command>
}
    229e:	2f 96       	adiw	r28, 0x0f	; 15
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	de bf       	out	0x3e, r29	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	cd bf       	out	0x3d, r28	; 61
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	1f 91       	pop	r17
    22b0:	0f 91       	pop	r16
    22b2:	08 95       	ret

000022b4 <main>:

int main(void)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
	GLCD_Init();		/* Initialize GLCD */
    22bc:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <GLCD_Init>
	GLCD_ClearAll();	/* Clear all GLCD display */
    22c0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <GLCD_ClearAll>
	GLCD_String(0,"Freq:8MHz ");	/* Print String on 0th page of display */
    22c4:	20 e6       	ldi	r18, 0x60	; 96
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	b9 01       	movw	r22, r18
    22cc:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <GLCD_String>
	GLCD_String(5,"Freq:8MHz ");	/* Print String on 0th page of display */
    22d0:	20 e6       	ldi	r18, 0x60	; 96
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	85 e0       	ldi	r24, 0x05	; 5
    22d6:	b9 01       	movw	r22, r18
    22d8:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <GLCD_String>
    22dc:	ff cf       	rjmp	.-2      	; 0x22dc <main+0x28>

000022de <__prologue_saves__>:
    22de:	2f 92       	push	r2
    22e0:	3f 92       	push	r3
    22e2:	4f 92       	push	r4
    22e4:	5f 92       	push	r5
    22e6:	6f 92       	push	r6
    22e8:	7f 92       	push	r7
    22ea:	8f 92       	push	r8
    22ec:	9f 92       	push	r9
    22ee:	af 92       	push	r10
    22f0:	bf 92       	push	r11
    22f2:	cf 92       	push	r12
    22f4:	df 92       	push	r13
    22f6:	ef 92       	push	r14
    22f8:	ff 92       	push	r15
    22fa:	0f 93       	push	r16
    22fc:	1f 93       	push	r17
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	ca 1b       	sub	r28, r26
    2308:	db 0b       	sbc	r29, r27
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
    2314:	09 94       	ijmp

00002316 <__epilogue_restores__>:
    2316:	2a 88       	ldd	r2, Y+18	; 0x12
    2318:	39 88       	ldd	r3, Y+17	; 0x11
    231a:	48 88       	ldd	r4, Y+16	; 0x10
    231c:	5f 84       	ldd	r5, Y+15	; 0x0f
    231e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2320:	7d 84       	ldd	r7, Y+13	; 0x0d
    2322:	8c 84       	ldd	r8, Y+12	; 0x0c
    2324:	9b 84       	ldd	r9, Y+11	; 0x0b
    2326:	aa 84       	ldd	r10, Y+10	; 0x0a
    2328:	b9 84       	ldd	r11, Y+9	; 0x09
    232a:	c8 84       	ldd	r12, Y+8	; 0x08
    232c:	df 80       	ldd	r13, Y+7	; 0x07
    232e:	ee 80       	ldd	r14, Y+6	; 0x06
    2330:	fd 80       	ldd	r15, Y+5	; 0x05
    2332:	0c 81       	ldd	r16, Y+4	; 0x04
    2334:	1b 81       	ldd	r17, Y+3	; 0x03
    2336:	aa 81       	ldd	r26, Y+2	; 0x02
    2338:	b9 81       	ldd	r27, Y+1	; 0x01
    233a:	ce 0f       	add	r28, r30
    233c:	d1 1d       	adc	r29, r1
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	ed 01       	movw	r28, r26
    234a:	08 95       	ret

0000234c <_exit>:
    234c:	f8 94       	cli

0000234e <__stop_program>:
    234e:	ff cf       	rjmp	.-2      	; 0x234e <__stop_program>
